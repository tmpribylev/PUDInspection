// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PUDInspection.Data;

namespace PUDInspection.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210402070024_Rename_CheckProperty")]
    partial class Rename_CheckProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserInspection", b =>
                {
                    b.Property<int>("InspectionsId")
                        .HasColumnType("int");

                    b.Property<string>("UserListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InspectionsId", "UserListId");

                    b.HasIndex("UserListId");

                    b.ToTable("ApplicationUserInspection");
                });

            modelBuilder.Entity("ApplicationUserInspectionSpace", b =>
                {
                    b.Property<int>("InspectionSpacesId")
                        .HasColumnType("int");

                    b.Property<string>("UserListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InspectionSpacesId", "UserListId");

                    b.HasIndex("UserListId");

                    b.ToTable("ApplicationUserInspectionSpace");
                });

            modelBuilder.Entity("ApplicationUserValidation", b =>
                {
                    b.Property<string>("UserListId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ValidationsId")
                        .HasColumnType("int");

                    b.HasKey("UserListId", "ValidationsId");

                    b.HasIndex("ValidationsId");

                    b.ToTable("ApplicationUserValidation");
                });

            modelBuilder.Entity("CheckPUD", b =>
                {
                    b.Property<int>("ChecksId")
                        .HasColumnType("int");

                    b.Property<int>("PUDListId")
                        .HasColumnType("int");

                    b.HasKey("ChecksId", "PUDListId");

                    b.HasIndex("PUDListId");

                    b.ToTable("CheckPUD");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PUDInspection.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VKLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PUDInspection.Models.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("PUDInspection.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hunt")
                        .HasColumnType("bit");

                    b.Property<int>("IterationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Check");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Check");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionCriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("Iteration")
                        .HasColumnType("int");

                    b.Property<int?>("PUDId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InspectionCriteriaId");

                    b.HasIndex("PUDId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckResults");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckResultEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<int?>("PUDId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PUDId");

                    b.HasIndex("UserId");

                    b.HasIndex("ValidationId");

                    b.ToTable("CheckResultEvaluations");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckVsCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckId")
                        .HasColumnType("int");

                    b.Property<int?>("CriteriaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("CheckVsCriterias");
                });

            modelBuilder.Entity("PUDInspection.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PUDInspection.Models.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoCheck")
                        .HasColumnType("bit");

                    b.Property<string>("AutoCheckFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Important")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("PUDInspection.Models.CriteriaEmailText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailTextId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("EmailTextId");

                    b.ToTable("CriteriaEmailTexts");
                });

            modelBuilder.Entity("PUDInspection.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PUDInspection.Models.EduProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("EduPrograms");
                });

            modelBuilder.Entity("PUDInspection.Models.EmailText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodPUDText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTexts");
                });

            modelBuilder.Entity("PUDInspection.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("PUDInspection.Models.InspectionSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InspectionSpaces");
                });

            modelBuilder.Entity("PUDInspection.Models.PUD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EduProgramId")
                        .HasColumnType("int");

                    b.Property<string>("EducationStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EduProgramId");

                    b.ToTable("PUDs");
                });

            modelBuilder.Entity("PUDInspection.Models.PUDAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<int?>("InspectionId")
                        .HasColumnType("int");

                    b.Property<int>("Iteration")
                        .HasColumnType("int");

                    b.Property<int?>("PUDId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("PUDId");

                    b.HasIndex("UserId");

                    b.HasIndex("ValidationId");

                    b.ToTable("PUDAllocations");
                });

            modelBuilder.Entity("PUDInspection.Models.PUDChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PUDId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PUDId");

                    b.ToTable("PUDChanges");
                });

            modelBuilder.Entity("PUDInspection.Models.ReportPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportPatterns");
                });

            modelBuilder.Entity("PUDInspection.Models.Inspection", b =>
                {
                    b.HasBaseType("PUDInspection.Models.Check");

                    b.Property<int?>("InspectionSpaceId")
                        .HasColumnType("int");

                    b.HasIndex("InspectionSpaceId");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("PUDInspection.Models.Validation", b =>
                {
                    b.HasBaseType("PUDInspection.Models.Check");

                    b.Property<int?>("InspectionId")
                        .HasColumnType("int");

                    b.HasIndex("InspectionId");

                    b.HasDiscriminator().HasValue("Validation");
                });

            modelBuilder.Entity("ApplicationUserInspection", b =>
                {
                    b.HasOne("PUDInspection.Models.Inspection", null)
                        .WithMany()
                        .HasForeignKey("InspectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserInspectionSpace", b =>
                {
                    b.HasOne("PUDInspection.Models.InspectionSpace", null)
                        .WithMany()
                        .HasForeignKey("InspectionSpacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserValidation", b =>
                {
                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PUDInspection.Models.Validation", null)
                        .WithMany()
                        .HasForeignKey("ValidationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckPUD", b =>
                {
                    b.HasOne("PUDInspection.Models.Check", null)
                        .WithMany()
                        .HasForeignKey("ChecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PUDInspection.Models.PUD", null)
                        .WithMany()
                        .HasForeignKey("PUDListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PUDInspection.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PUDInspection.Models.CheckResult", b =>
                {
                    b.HasOne("PUDInspection.Models.CheckVsCriteria", "InspectionCriteria")
                        .WithMany("CheckResults")
                        .HasForeignKey("InspectionCriteriaId");

                    b.HasOne("PUDInspection.Models.PUD", "PUD")
                        .WithMany("CheckResultList")
                        .HasForeignKey("PUDId");

                    b.HasOne("PUDInspection.Models.ApplicationUser", "User")
                        .WithMany("CheckResults")
                        .HasForeignKey("UserId");

                    b.Navigation("InspectionCriteria");

                    b.Navigation("PUD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckResultEvaluation", b =>
                {
                    b.HasOne("PUDInspection.Models.PUD", "PUD")
                        .WithMany()
                        .HasForeignKey("PUDId");

                    b.HasOne("PUDInspection.Models.ApplicationUser", "User")
                        .WithMany("CheckResultEvaluations")
                        .HasForeignKey("UserId");

                    b.HasOne("PUDInspection.Models.Validation", "Validation")
                        .WithMany()
                        .HasForeignKey("ValidationId");

                    b.Navigation("PUD");

                    b.Navigation("User");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckVsCriteria", b =>
                {
                    b.HasOne("PUDInspection.Models.Check", "Check")
                        .WithMany("CriteriaList")
                        .HasForeignKey("CheckId");

                    b.HasOne("PUDInspection.Models.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId");

                    b.Navigation("Check");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("PUDInspection.Models.CriteriaEmailText", b =>
                {
                    b.HasOne("PUDInspection.Models.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId");

                    b.HasOne("PUDInspection.Models.EmailText", "EmailText")
                        .WithMany("CriteriaEmailTextList")
                        .HasForeignKey("EmailTextId");

                    b.Navigation("Criteria");

                    b.Navigation("EmailText");
                });

            modelBuilder.Entity("PUDInspection.Models.Department", b =>
                {
                    b.HasOne("PUDInspection.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("PUDInspection.Models.EduProgram", b =>
                {
                    b.HasOne("PUDInspection.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("PUDInspection.Models.Faculty", b =>
                {
                    b.HasOne("PUDInspection.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("PUDInspection.Models.PUD", b =>
                {
                    b.HasOne("PUDInspection.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PUDInspection.Models.EduProgram", "EduProgram")
                        .WithMany()
                        .HasForeignKey("EduProgramId");

                    b.Navigation("Department");

                    b.Navigation("EduProgram");
                });

            modelBuilder.Entity("PUDInspection.Models.PUDAllocation", b =>
                {
                    b.HasOne("PUDInspection.Models.Inspection", "Inspection")
                        .WithMany("PUDAllocationList")
                        .HasForeignKey("InspectionId");

                    b.HasOne("PUDInspection.Models.PUD", "PUD")
                        .WithMany()
                        .HasForeignKey("PUDId");

                    b.HasOne("PUDInspection.Models.ApplicationUser", "User")
                        .WithMany("PUDAllocations")
                        .HasForeignKey("UserId");

                    b.HasOne("PUDInspection.Models.Validation", null)
                        .WithMany("PUDAllocationList")
                        .HasForeignKey("ValidationId");

                    b.Navigation("Inspection");

                    b.Navigation("PUD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PUDInspection.Models.PUDChange", b =>
                {
                    b.HasOne("PUDInspection.Models.PUD", "PUD")
                        .WithMany()
                        .HasForeignKey("PUDId");

                    b.Navigation("PUD");
                });

            modelBuilder.Entity("PUDInspection.Models.Inspection", b =>
                {
                    b.HasOne("PUDInspection.Models.InspectionSpace", "InspectionSpace")
                        .WithMany("InspectionList")
                        .HasForeignKey("InspectionSpaceId");

                    b.Navigation("InspectionSpace");
                });

            modelBuilder.Entity("PUDInspection.Models.Validation", b =>
                {
                    b.HasOne("PUDInspection.Models.Inspection", "Inspection")
                        .WithMany("Validations")
                        .HasForeignKey("InspectionId");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("PUDInspection.Models.ApplicationUser", b =>
                {
                    b.Navigation("CheckResultEvaluations");

                    b.Navigation("CheckResults");

                    b.Navigation("PUDAllocations");
                });

            modelBuilder.Entity("PUDInspection.Models.Check", b =>
                {
                    b.Navigation("CriteriaList");
                });

            modelBuilder.Entity("PUDInspection.Models.CheckVsCriteria", b =>
                {
                    b.Navigation("CheckResults");
                });

            modelBuilder.Entity("PUDInspection.Models.EmailText", b =>
                {
                    b.Navigation("CriteriaEmailTextList");
                });

            modelBuilder.Entity("PUDInspection.Models.InspectionSpace", b =>
                {
                    b.Navigation("InspectionList");
                });

            modelBuilder.Entity("PUDInspection.Models.PUD", b =>
                {
                    b.Navigation("CheckResultList");
                });

            modelBuilder.Entity("PUDInspection.Models.Inspection", b =>
                {
                    b.Navigation("PUDAllocationList");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("PUDInspection.Models.Validation", b =>
                {
                    b.Navigation("PUDAllocationList");
                });
#pragma warning restore 612, 618
        }
    }
}
